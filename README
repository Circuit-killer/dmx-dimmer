This is an open-source 12-channel DMX512 dimmer, currently known as
dmx-dimmer. The name will change to something less meaningful by
production time. It is based on Hendrik Hoelscher's dimmer. See [1] on
the latter.

Many modifications have been made, but most importantly:

- support up to 12 channels;
- use 3-phase mains power, 4 channels per phase;
- more common AVR microcontroller, ATMega168;
- complete code rewrite in C.

This is a work in progress, currently in late design stage.
Documentation is basically unavailable, but might become so if anyone is
interested.

It is probably impossible to use this git project for now, since some
custom symbols/footprints are missing from the tree. I will try to
include them ASAP.

gEDA [2] was chosen to do the design work. As to why is a topic for a whole article. Mainly, I wanted to see whether it's good enough for big projects. The short answer is no. Then again, I might be doing something wrong.


[1] http://www.hoelscher-hi.de/hendrik/english/dimmer.htm
[2] http://www.gpleda.org/index.html



NOTE: everything below is grossly outdated and should not be read. At all.


===== INTERFACES =====

This section details the various interfaces of the main
microcontroller, U1. At the time of writing this is an ATmega168.


----- DMX input -----

DMX control signals are received using the 3-pin connector DMX1. The
balanced signal is converted using a 75176 IC.

VERIFY A low on /RE enables
the receiver, a low on DE disables the driver. Presumably these two pins can be
connected to GND, then the microcontroller will only be able to receive the
DMX signal through the R pin of 75176. This is connected to PD0 of the uC.

On ATmega168, PD0 and PD1 are respectively RXD and TXD of USART; PD2 is
INT0.

It is desirable to detect an incoming DMX transmission using an external
interrupt. A timing diagram is available at [1]. According to it, the
DMX master idles by holding the data line HIGH (MARK before BREAK, MBB).
When a new packet comes in, the line is pulled LOW (SPACE for BREAK),
then HIGH (MARK after BREAK, MAB), then data transmission begins. It is
therefore possible to detect a new DMX packet when the line changes
state from HIGH to LOW after an MBB.

Data is transmitted in slots of 11 bytes (L DDDD DDDD HH), up to 513
slots. The first one is always a START CODE. It is followed by slots of
data for DMX channels.

The data byte is ordered least significant bit first.

[1] http://www.erwinrol.com/index.php?stagecraft/dmx.php


----- Switch mode control -----

ATmega168 has less I/O pins than ATmega8515 (used in Hoelscher's
design). Primitive switching control would require 10 additional pins,
so this feature is not implemented.


----- Zero-crossing -----

To partially avoid EMI and high-amplitude voltage spikes, zero-crossing
power switching is used. That is, outputs are switched off at moments
when mains' AC voltage, which is sinusoidal, is at its minimum
amplitude, 0 volts. This is standard for SCR-based dimmers.

ZC detection is accomplished externally. The output of the detector is
received on header ZC1, pin 1, and connected to PD3, which is U1's pin for
external interrupt INT1. This interrupt is triggered every time ???, which
is configured using register ???.

???


----- Status LEDs -----

???


----- Temperature control -----

??? Thermocouple to AIN1?


----- Output -----

???


----- In-system programming -----

Used to update the dimmer's firmware. This requires connecting an AVR
programmer to ISP1 and shortening jumper JP1.

It is advised to turn off the dimmer's external power.


----- Unused pins -----

Several pins of the microcontroller are unused. ???


